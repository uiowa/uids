@import 'breakpoints';
@import 'placeholders';
@import 'grid';

//=======================================================
// Mixins
//=======================================================

// Clearfix
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// Makes an element visually hidden, but accessible.
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin element-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin element-invisible-off {
  position: static !important;
  clip: auto;
  height: auto;
  width: auto;
  overflow: auto;
}

// Makes an element visually hidden by default, but visible when focused.
@mixin element-focusable {
  @include element-invisible;

  &:active,
  &:focus {
    @include element-invisible-off;
  }
}

@mixin fas() {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  font-style: normal;
  font-variant: normal;
  text-rendering: auto;
  line-height: 1;
  font-family: "Font Awesome 5 Free";
  font-weight: 900;
}


// Gold Bracket ///////////////

@mixin bracket() {
  position: relative;
  @include margin($top: $sm, $bottom: $sm);
  padding: $md;

  &:before,
  &:after {
    content: ' ';
    position: absolute;
    top: 0;
    width: $sm;
    height: 100%;
    border: 3px solid $primary;
  }

  &:before {
    left: -1em;
    border-right: 0;
  }

  &:after {
    right: -1em;
    border-left: 0;
  }
}

//////////  Padding/Margin

@mixin padding($top: null, $right: null, $bottom: null, $left: null) {
  padding-top: $top;
  padding-right: $right;
  padding-bottom: $bottom;
  padding-left: $left;
}

@mixin margin($top: null, $right: null, $bottom: null, $left: null) {
  margin-top: $top;
  margin-right: $right;
  margin-bottom: $bottom;
  margin-left: $left;
}


//////////  Responsive BG Image

@mixin responsive-bg {
  [data-responsive-background-image] {
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center
  }

  [data-responsive-background-image] img {
    display: none;

    .no-js & {
      display: block;
    }
  }
}

// Headings

@mixin h1 {
  font-size: $h1-font-size;
  line-height: unset;
  @include margin($top: $sm, $bottom: $sm);
  font-family: $font-family-serif;
  font-weight: $font-weight-medium-bold;
  font-size: containerClamp(2.3rem, 3.35rem);
}

@mixin h2 {
  font-size: $h2-font-size;
  line-height: 1.25;
  font-weight: $font-weight-medium;
  @include margin($top: 0, $bottom: $xsm);
  &:not(:first-child) {
    @include margin($top: $lg);
  }
  font-size: containerClamp(1.95rem, 2.3rem);
}

@mixin h3 {
  font-size: $h3-font-size;
  line-height: 1.25;
  @include margin($top: 0, $bottom: $xsm);
  &:not(:first-child) {
    @include margin($top: $lg);
  }
  font-size: containerClamp(1.65rem, 1.9125rem);
}

@mixin h4 {
  font-size: $h4-font-size;
  line-height: 1.25;
  font-weight: $font-weight-medium;
  @include margin($top: 0, $bottom: $xsm);
  &:not(:first-child) {
    @include margin($top: $lg);
  }
  font-size: containerClamp(1.45rem, 1.6rem);
}

@mixin h5 {
  font-size: $h5-font-size;
  line-height: 1.25;
  font-weight: $font-weight-medium;
  @include margin($top: 0, $bottom: $xsm);
  &:not(:first-child) {
    @include margin($top: $lg);
  }
  font-size: containerClamp(1.3rem, 1.4rem);
}

@mixin h6 {
  font-size: $h6-font-size;
  line-height: 1.25;
  font-weight: $font-weight-medium;
  @include margin($top: 0, $bottom: $xsm);
  &:not(:first-child) {
    @include margin($top: $lg);
  }
}

// @todo SiteNow Mixins

// mixins

@mixin border {
  border: 1px solid;
  border-color: rgba(0,0,0,.425);
}

@mixin text-light {
  color: #EDECEB !important;
}

@mixin brand-cool-gray {
  color: $brand-cool-gray !important;
}

@mixin fullwidth-container {
  width: 100%;
  padding-right: 0;
  padding-left: 0;
  margin-right: auto;
  margin-left: auto;
}

@mixin bg-light {
  background-color: $light !important;
}

@mixin bg-dark {
  background-color: $brand-cool-gray !important;

  h2,
  h3,
  h4,
  h5,
  h6 {
    color: #fff;

    &.card__title {
      color: $secondary;
    }
  }
}

@mixin bg-black {
  background-color: $secondary !important;

  h2,
  h3,
  h4,
  h5,
  h6 {
    color: #fff;

    &.card__title {
      color: $secondary;
    }
  }
}

@mixin bg-yellow {
  background-color: #ffcd00 !important;
}

@mixin list-group-item-action {
  width: 100%;
  color: #495057;
  text-align: inherit;
}

@mixin list-group {
  display: flex;
  flex-direction: column;
  padding-left: 0;
  margin-bottom: 0;
}

@mixin list-group-item {
  position: relative;
  display: block;
  padding: 0 0 $gutter;
  margin-bottom: 0;
  background-color: #fff;
  border-bottom: 1px solid rgba(0, 0, 0, .125);

  &:first-child {
    border-top: 1px solid rgba(0, 0, 0, .125);
    padding-top: 0;
  }
}

@mixin list-group-flush {
  .list-group-item {
    border-right-width: 0;
    border-left-width: 0;
    border-radius: 0;
  }

  .list-group-item:first-child {
    border-top-width: 0
  }

  &:last-child .list-group-item:last-child {
    border-bottom-width: 0
  }
}

@mixin media-body {
  flex: 1;
}

@mixin card-columns {
  column-count: 3;
  column-gap: 1.25rem;
  orphans: 1;
  widows: 1;
}

@mixin container-width {
  margin: 0 $gutter;
  position: relative;

  @include breakpoint(page-container) {
    max-width: 81.875em;
    margin: 0 auto;
  }
}

// Buttons

@mixin bttn {
  border: none;
  display: inline-block;
  align-items: center;
  justify-content: center;
  position: relative;
  cursor: pointer;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  line-height: 1.4;
  font-family: $font-family-caps-bold;
  font-size: 1.25rem;
  padding: 1rem 2rem 1rem;
  -webkit-font-smoothing: auto;
  -moz-osx-font-smoothing: auto;

  i,
  svg {
    margin-left: $sm;
  }
}

@mixin bttn--focus {
  &:after {
    content: '';
    position: absolute;
    left: 50%;
    bottom: 0;
    width: 100%;
    height: 4px;
    background-color: $primary;
    transform-origin: center;
    transform: translate(-50%, 0) scaleX(0);
    transition: transform 0.3s ease-in-out;
  }

  &:focus {
    text-decoration: underline;
  }

  &:hover::after,
  &:focus::after {
    transform: translate(-50%, 0) scaleX(1);
  }
}

@mixin bttn--primary {
  color: $secondary;
  background: $primary;

  i,
  svg,
  span {
    color: $white;
  }
}

@mixin bttn--secondary {
  color: $white;
  background: $secondary;
    i,
    svg,
    span {
      color: $primary;
    }
}

@mixin bttn--secondary__light {
  color: $white;
}

@mixin bttn--tertiary {
  color: $secondary;
  i,
  svg,
  span {
    color: $primary;
  }
}

@mixin bttn--transparent {
  background: transparent;
  color: $secondary;
  i,
  svg,
  span {
    color: $primary;
  }
}

// Extends ///////////////
%shadow {
  text-shadow: 0 0 20px rgba(0, 0, 0, 0.8);
}


%no-ul-list {
  list-style-type: none;
  padding: 0;
  margin: 0;

  >li {
    display: inline-block;
    list-style-type: none;
    margin: 0;
  }
}

%container {
  margin: 0 $gutter;
  position: relative;

  @include breakpoint(page-container) {
    max-width: 81.875em;
    margin: 0 auto;
  }
}

// Font Smoothing ///////////////
%font-smoothing-on {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

%font-smoothing-off {
  -webkit-font-smoothing: auto;
  -moz-osx-font-smoothing: auto;
}

// utility classes

%uids-component--center {
  @include center(both);
  display: block;
  text-align: center;
}

%uids-component--flex-center {
  @include center(both);
  flex-flow: column nowrap;
  text-align: center;

  @include breakpoint(sm) {
    padding: 1.5rem 0;
  }
}

%uids-component--left {
  text-align: left;
  @include center(both);
}

%uids-component--flex-left {
  flex-flow: column nowrap;
  text-align: left;
  width: 100%;
  padding: 1.5rem 0;
}

// This function creates a clamp rule between the sm breakpoint of 600px and our container width which is 1310 px
@function containerClamp($minVal, $maxVal) {
  $remsize: 16;
  $min: $minVal;
  $max: $maxVal;

  // Make sure pixels are expressed in rems for min.
  @if (type-of($min) == "number") and ($min != 0) {
    @if (unit($min)  == 'px') {
      $min: ($min/1px) / $remsize + 0rem;
    }
  }

  // Make sure pixels are expressed in rems for max.
  @if (type-of($max) == "number") and ($max != 0) {
    @if (unit($max) == 'px') {
      $max: ($max/1px) / $remsize + 0rem;
    }
  }

  // Calculate the slope times the x for the function.
  $slope: ((($max/1rem * $remsize) - ($min/1rem * $remsize)) / 710);
  $slopeX: $slope * 100;
  // Round the slope to 4 decimal places.
  $slopeX: decimal-round($slopeX, 4);
  $intercept: ($min - (($slope + 0rem) * 600) / $remsize);
  // Round the intercept to 4 decimal places.
  $intercept: decimal-round($intercept, 4);
  $operator: if($intercept < 0, '-', '+');

  $prefVal: 'calc(' + $slopeX + 'vw ' + $operator + ' ' + $intercept +')';
  @return unquote('clamp(' + $min + ', ' + $prefVal + ', ' + $max + ')');
}

// This is taken from here : https://gist.github.com/terkel/4373420 .
@function decimal-round ($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}
